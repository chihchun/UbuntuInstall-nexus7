#!/sbin/sh

export PATH=$PATH:${PWD}
UPDATE_FOLDER=${PWD}
PRIVATE_DIR=$2
set -e

if [ ! -e "$1" ]; then
    echo "Command file doesn't exist: $1"
    exit 1
fi
mv $1 $1.applying
COMMAND_FILE=$1.applying

REMOVE_LIST="$COMMAND_FILE"

TMP=/cache/tmp

echo "Starting image upgrader: $(date)"

# Functions
verify_signature() {
    return 0
    # $1 => validation keyring name
    # $2 => path to validate

    if [ ! -e $2 ]; then
        echo "File doesn't exist: $2"
        return 1
    fi

    # Check against the blacklist
    if [ -e ${TMP}/system-image/blacklist/pubring.gpg ]; then
        export GNUPGHOME=${TMP}/system-image/blacklist/
        if gpg --verify $2 >/dev/null 2>&1; then
            echo "File signed by a blacklisted key: $2"
            return 1
        fi
    fi

    # Check against the keyring
    export GNUPGHOME=${TMP}/system-image/$1/
    if [ ! -e "$GNUPGHOME" ]; then
        echo "Keyring doesn't exist: $1"
        return 1
    fi

    if gpg --verify $2 >/dev/null 2>&1; then
        return 0
    fi
}

install_keyring() {
    # $1 => full path to tarball
    # $2 => full path to signature

    # Some basic checks
    if [ ! -e "$1" ] || [ ! -e "$2" ]; then
        echo "Missing keyring files: $1 => $2"
        return 1
    fi

    # Unpacking
    TMPDIR=$(busybox mktemp -d ${TMP}/tempdir.XXXXXXXX)
    cd $TMPDIR
    cat $1 | busybox unxz | tar xf -
    if [ ! -e keyring.json ] || [ ! -e keyring.gpg ]; then
        rm -Rf $TMPDIR
        echo "Invalid keyring: $1"
        return 1
    fi

    # Extract the expiry
    keyring_expiry=$(grep "^    \"expiry\": " keyring.json | busybox cut -d: -f2 | busybox sed -e "s/[ \",]//g")
    if [ -n "$keyring_expiry" ] && [ "$keyring_expiry" -lt "$(date +%s)" ]; then
        rm -Rf $TMPDIR
        echo "Keyring expired: $1"
        return 1
    fi

    # Extract the keyring type
    keyring_type=$(grep "^    \"type\": " keyring.json | busybox cut -d: -f2 | busybox sed -e "s/[, \"]//g")
    if [ -z "$keyring_type" ]; then
        rm -Rf $TMPDIR
        echo "Missing keyring type: $1"
        return 1
    fi

    if [ -e ${TMP}/system-image/$keyring_type ]; then
        rm -Rf $TMPDIR
        echo "Keyring already loaded: $1"
        return 1
    fi

    signer="unknown"
    case "$keyring_type" in
        archive-master)
            signer=""
        ;;

        image-master)
            signer="archive-master"
        ;;

        image-signing|blacklist)
            signer="image-master"
        ;;

        device-signing)
            signer="image-signing"
        ;;
    esac

    if [ -n "$signer" ] && ! verify_signature $signer $2; then
        rm -Rf $TMPDIR
        echo "Invalid signature: $1"
        return 1
    fi

    mkdir ${TMP}/system-image/$keyring_type
    chmod 700 ${TMP}/system-image/$keyring_type
    mv $TMPDIR/keyring.gpg ${TMP}/system-image/$keyring_type/pubring.gpg
    chmod 600 ${TMP}/system-image/$keyring_type/pubring.gpg
    chown 0:0 ${TMP}/system-image/$keyring_type/pubring.gpg
    rm -Rf $TMPDIR
    return 0
}

# print out if we will need to create SWAP file
if [ ! -e /data/SWAP.img ]; then
    echo "SWAP-file-missing" >&2
fi

# Initialize GPG
rm -Rf ${TMP}/system-image
mkdir -p ${TMP}/system-image
if [ -e ${PWD}/archive-master.tar.xz ]; then
    echo "Loading keyring: archive-master.tar.xz"
    install_keyring ${PWD}/archive-master.tar.xz ${PWD}/archive-master.tar.xz.asc
fi

# Process the command file
FULL_IMAGE=0
echo "Processing the command file"
while read line
do
    set -- $line
    case "$1" in
        format)
            echo "Formating: $2"
            case "$2" in
                system)
                    FULL_IMAGE=1
                    rm -f /data/system.img
                    rm -f /data/.layout_version
                    busybox dd if=/dev/zero of=/data/system.img seek=500K bs=4096 count=1
                    busybox mkfs.ext2 -F /data/system.img
                ;;

                data)
                    rm -f /data/SWAP.img
                    rm -Rf /data/system-data
                    rm -Rf /data/user-data
                ;;

                *)
                    echo "Unknown format target: $2"
                ;;
            esac
        ;;

        load_keyring)
            if [ ! -e "$UPDATE_FOLDER/$2" ] || [ ! -e "$UPDATE_FOLDER/$3" ]; then
                echo "Skipping missing file: $2"
                continue
            fi
            REMOVE_LIST="$REMOVE_LIST $UPDATE_FOLDER/$2 $UPDATE_FOLDER/$3"

            echo "Loading keyring: $2"
            install_keyring $UPDATE_FOLDER/$2 $UPDATE_FOLDER/$3

            if [ -e ${TMP}/system-image/image-master/pubring.gpg ] && \
               [ ! -e ${TMP}/system-image/blacklist/pubring.gpg ] && \
               [ -e /data/system-data/var/lib/system-image/blacklist.tar.xz ] && \
               [ -e /data/system-data/var/lib/system-image/blacklist.tar.xz.asc ]; then
                echo "Loading blacklist keyring"
                install_keyring /data/system-data/var/lib/system-image/blacklist.tar.xz /data/system-data/var/lib/system-image/blacklist.tar.xz.asc
            fi
        ;;

        mount)
            case "$2" in
                system)
                    mkdir -p /cache/system
                    aloopmount mount ext4 /data/system.img /cache/system
                ;;

                *)
                    echo "Unknown mount target: $2"
                ;;
            esac
        ;;

        unmount)
            case "$2" in
                system)
                    aloopmount umount /cache/system && echo .
                    rmdir /cache/system
                ;;

                *)
                    echo "Unknown mount target: $2"
                ;;
            esac
        ;;

        update)
            if [ ! -e "$UPDATE_FOLDER/$2" ] || [ ! -e "$UPDATE_FOLDER/$3" ]; then
                echo "Skipping missing file: $2"
                continue
            fi

            REMOVE_LIST="$REMOVE_LIST $UPDATE_FOLDER/$2 $UPDATE_FOLDER/$3"
            if ! verify_signature device-signing $UPDATE_FOLDER/$2 && \
               ! verify_signature image-signing $UPDATE_FOLDER/$2; then
                echo "Invalid signature"
                continue
            fi

            echo "Applying update: $2"
            cd /cache
            rm -Rf partitions

            # Start by removing any file listed in "removed"
            if [ "$FULL_IMAGE" != "1" ]; then
                cat $UPDATE_FOLDER/$2 | busybox unxz | tar xf - removed >/dev/null 2>&1 || true
                if [ -e removed ]; then
                    while read file; do
                        rm -Rf $file
                    done < removed
                fi
                rm -f removed
            fi

            # Unpack everything else on top of the system partition
            cat $UPDATE_FOLDER/$2 | busybox unxz | tar --checkpoint=200 -xf -
            rm -f removed

            if [ -e "partitions/boot.img" ]; then
                # mako only, need better solution
                cat partitions/boot.img > /dev/block/platform/msm_sdcc.1/by-name/recovery
                cp partitions/boot.img $PRIVATE_DIR/ubuntu-boot.img
            fi

if false; then # 
            # Process partition images
            while read line; do
                set -- $line

                part=${1##/}
                path=$3

                if [ -e partitions/${part}.img ] && [ -e $path ]; then
                    echo "Flashing ${part} at ${path}"
                    cat partitions/${part}.img > ${path}
                    rm partitions/${part}.img
                fi
            done < /etc/recovery.fstab
fi
        ;;

        *)
            echo "Unknown command: $1"
        ;;
    esac
done < $COMMAND_FILE

# Remove the update files
for file in $REMOVE_LIST; do
    echo rm $file
done

# Create the SWAP image if missing
if [ ! -e /data/SWAP.img ]; then
    echo "Creating SWAP device."
    echo "SWAP Checkpoint 0" >&2
    # create swap file in private folder, so service can watch progress
    dd if=/dev/zero of=$PRIVATE_DIR/SWAP.img bs=4096 count=131072
    echo "Moving SWAP device to final destination" >&2
    mv $PRIVATE_DIR/SWAP.img /data/
    echo "Calling mkswap on /data/SWAP.img" >&2
    busybox mkswap /data/SWAP.img
fi

touch /data/.last_update || true
sync
echo "Done upgrading: $(date)"
exit 0
